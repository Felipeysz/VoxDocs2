@using VoxDocs.DTO
@model VoxDocs.Models.ViewModels.DocumentosOfflineViewModel
@{
    Layout = null;
    ViewData["Title"] = "Documentos Offline • VoxDocs";
}

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@ViewData["Title"]</title>
    <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        .offline-header {
            background-color: #fff3cd;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 15px;
        }
        .offline-icon {
            color: #ffc107;
            font-size: 32px;
        }
        .empty-state {
            text-align: center;
            padding: 40px;
            background-color: #f8f9fa;
            border-radius: 8px;
        }
    </style>
</head>
<body>
    <div class="container py-4">
        <div class="offline-header">
            <span class="material-symbols-outlined offline-icon">wifi_off</span>
            <div>
                <h2>Documentos Offline</h2>
                <p class="mb-0">Visualizando documentos salvos localmente no seu dispositivo.</p>
            </div>
        </div>
        
        @if (!string.IsNullOrEmpty(Model.StatusMessage))
        {
            <div class="alert @(Model.HasError ? "alert-danger" : "alert-success") alert-dismissible fade show">
                @Model.StatusMessage
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <div id="offline-list">
            @if (!Model.Documentos.Any())
            {
                <div class="empty-state">
                    <span class="material-symbols-outlined" style="font-size: 48px; color: #6c757d;">folder_off</span>
                    <h4 class="mt-3">Nenhum documento offline disponível</h4>
                    <p>Para ter documentos disponíveis offline, acesse a página de Documentos quando estiver online e clique em "Preparar Offline".</p>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Nome</th>
                                <th>Descrição</th>
                                <th>Data</th>
                                <th>Download</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var doc in Model.Documentos)
                            {
                                <tr>
                                    <td>@doc.NomeArquivo</td>
                                    <td>@doc.Descricao</td>
                                    <td>@doc.DataCriacao.ToString("dd/MM/yyyy")</td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary download-offline" 
                                                data-id="@doc.Id" data-nome="@doc.NomeArquivo">
                                            <span class="material-symbols-outlined">download</span> Baixar
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
        
        <div class="mt-4 text-center">
            <a href="@Url.Action("Documentos", "DocumentosMvc")" class="btn btn-primary">
                <span class="material-symbols-outlined">wifi</span>
                Voltar para Documentos Online
            </a>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        $(document).ready(function() {
            // Função para download de documentos offline
            $(document).on('click', '.download-offline', function() {
                const docId = $(this).data('id');
                const docNome = $(this).data('nome');
                
                openDb().then(db => {
                    const tx = db.transaction('documentos', 'readonly');
                    const store = tx.objectStore('documentos');
                    const request = store.get(docId);
                    
                    request.onsuccess = function() {
                        const doc = request.result;
                        if (doc && doc.Blob) {
                            const url = URL.createObjectURL(doc.Blob);
                            const a = document.createElement('a');
                            a.href = url;
                            a.download = docNome;
                            document.body.appendChild(a);
                            a.click();
                            document.body.removeChild(a);
                            URL.revokeObjectURL(url);
                        } else {
                            alert('Documento não encontrado no cache offline.');
                        }
                    };
                    
                    request.onerror = function() {
                        alert('Erro ao acessar o cache offline.');
                    };
                }).catch(error => {
                    alert(error);
                });
            });
            
            // Função para abrir o IndexedDB
            function openDb() {
                return new Promise((resolve, reject) => {
                    const request = indexedDB.open('voxdocs-offline', 1);
                    
                    request.onupgradeneeded = function(e) {
                        const db = e.target.result;
                        if (!db.objectStoreNames.contains('documentos')) {
                            db.createObjectStore('documentos', { keyPath: 'Id' });
                        }
                    };
                    
                    request.onsuccess = function(e) { 
                        resolve(e.target.result); 
                    };
                    
                    request.onerror = function(e) { 
                        reject('Não foi possível acessar o banco de dados offline.'); 
                    };
                });
            }
        });
    </script>
</body>
</html>
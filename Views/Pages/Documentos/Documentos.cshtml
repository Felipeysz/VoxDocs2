@model VoxDocs.Models.ViewModels.DocumentosViewModel
@{
    Layout = null;
    ViewData["Title"] = "Documentos • VoxDocs";
}

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@ViewData["Title"]</title>
    <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <style>
        :root {
            --vox-purple-primary: #6a1b9a;
            --vox-purple-secondary: #9c27b0;
            --vox-purple-light: #ba68c8;
            --vox-purple-lighter: #e1bee7;
            --vox-purple-dark: #4a148c;
        }
        
        body {
            background-color: #f8f9fa;
            font-family: 'Poppins', sans-serif;
        }
        
        .btn-primary {
            background-color: var(--vox-purple-primary);
            border-color: var(--vox-purple-primary);
        }
        .btn-primary:hover {
            background-color: var(--vox-purple-dark);
            border-color: var(--vox-purple-dark);
        }
        
        .btn-outline-primary {
            color: var(--vox-purple-primary);
            border-color: var(--vox-purple-primary);
        }
        .btn-outline-primary:hover {
            background-color: var(--vox-purple-primary);
            border-color: var(--vox-purple-primary);
        }
        
        .btn-secondary {
            background-color: var(--vox-purple-light);
            border-color: var(--vox-purple-light);
            color: white;
        }
        .btn-secondary:hover {
            background-color: var(--vox-purple-secondary);
            border-color: var(--vox-purple-secondary);
        }
        
        .alert-success {
            background-color: #e8f5e9;
            border-color: #c8e6c9;
            color: #2e7d32;
        }
        
        .alert-danger {
            background-color: #ffebee;
            border-color: #ffcdd2;
            color: #c62828;
        }
        
        .alert-warning {
            background-color: #fff8e1;
            border-color: #ffecb3;
            color: #f57f17;
        }
        
        .alert-info {
            background-color: #e3f2fd;
            border-color: #bbdefb;
            color: #1565c0;
        }
        
        .action-btn {
            cursor: pointer !important;
            color: var(--vox-purple-primary);
            text-decoration: none;
            margin-right: 8px;
            transition: color 0.2s;
        }
        .action-btn:hover {
            color: var(--vox-purple-dark);
            text-decoration: none;
        }
        
        .doc-card {
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            padding: 1.5rem;
            margin-bottom: 2rem;
            border-top: 3px solid var(--vox-purple-primary);
        }
        
        .doc-header {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 1.25rem;
            margin-bottom: 1.5rem;
            color: var(--vox-purple-dark);
            font-weight: 600;
        }
        
        .list-group-item {
            transition: background-color 0.2s;
        }
        
        .list-group-item:hover {
            background-color: #f5f5f5;
        }
        
        .list-btn {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px;
            color: var(--vox-purple-dark);
            text-decoration: none;
            transition: all 0.2s;
        }
        
        .list-btn:hover {
            color: var(--vox-purple-primary);
        }
        
        .material-symbols-outlined {
            color: var(--vox-purple-primary);
        }
        
        .action-cell {
            white-space: nowrap;
        }
        
        .table th {
            background-color: var(--vox-purple-lighter);
            color: var(--vox-purple-dark);
        }
        
        .table-hover tbody tr:hover {
            background-color: #f5f5f5;
        }
        
        .modal-header {
            background-color: var(--vox-purple-primary);
            color: white;
        }
        
        .nav-tabs .nav-link.active {
            color: var(--vox-purple-primary);
            border-bottom: 2px solid var(--vox-purple-primary);
        }
        
        .nav-tabs .nav-link:hover:not(.active) {
            color: var(--vox-purple-secondary);
        }
    </style>
</head>
<body>
    @Html.AntiForgeryToken()
    @await Html.PartialAsync("_NavbarPartial")
    @await Html.PartialAsync("_VoiceAssistantModal")
    
    <div class="container-fluid">
        <!-- Mensagens de Sucesso/Erro -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @TempData["ErrorMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <!-- Controle das etapas -->
        @if (Model.SelectedPastaPrincipalNome == null)
        {
            <!-- Etapa 1: Seleção da Pasta Principal -->
            <div class="doc-card" id="etapa1">
                <div class="doc-header">
                    <span class="material-symbols-outlined">folder_open</span>
                    Selecione a Pasta Principal
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var p in Model.PastaPrincipais)
                    {
                        <li class="list-group-item">
                            <a href="@Url.Action("Documentos", "DocumentosMvc", new { pastaPrincipalNome = p.NomePastaPrincipal })" class="list-btn">
                                <span class="material-symbols-outlined">folder</span>
                                @p.NomePastaPrincipal
                            </a>
                        </li>
                    }
                </ul>
            </div>
        }
        else if (Model.SelectedSubPastaNome == null)
        {
            <!-- Etapa 2: Seleção da Subpasta -->
            <div class="doc-card" id="etapa2">
                <div class="doc-header">
                    <span class="material-symbols-outlined">folder_open</span>
                    Selecione a Subpasta em <strong>@Model.SelectedPastaPrincipalNome</strong>
                </div>
                <ul class="list-group list-group-flush">
                    @if (!Model.SubPastas.Any())
                    {
                        <li class="list-group-item">
                            <div class="alert alert-warning mb-0">
                                Nenhuma subpasta encontrada para esta Pasta Principal.
                            </div>
                        </li>
                    }
                    else
                    {
                        foreach (var s in Model.SubPastas)
                        {
                            <li class="list-group-item">
                                <a href="@Url.Action("Documentos", "DocumentosMvc", new { pastaPrincipalNome = Model.SelectedPastaPrincipalNome, subPastaNome = s.NomeSubPasta })" class="list-btn">
                                    <span class="material-symbols-outlined">folder</span>
                                    @s.NomeSubPasta
                                </a>
                            </li>
                        }
                    }
                </ul>
                <div class="mt-3">
                    <a class="btn btn-secondary" href="@Url.Action("Documentos", "DocumentosMvc")">
                        <span class="material-symbols-outlined">arrow_back</span>
                        Voltar ao início
                    </a>
                </div>
            </div>
        }
        else
        {
            <!-- Etapa 3: Listagem de Documentos -->
            <div class="doc-card" id="etapa3">
                <div class="doc-header">
                    <span class="material-symbols-outlined">description</span>
                    Documentos em <strong>@Model.SelectedPastaPrincipalNome / @Model.SelectedSubPastaNome</strong>
                </div>
                @if (!Model.Documentos.Any())
                {
                    <div class="alert alert-info">Pasta Sem Documentos. Por favor, faça upload.</div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Arquivo</th>
                                    <th>Descrição</th>
                                    <th>Data</th>
                                    <th>Segurança</th>
                                    <th>Ações</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var doc in Model.Documentos)
                                {
                                    <tr>
                                        <td>@doc.NomeArquivo</td>
                                        <td>@doc.Descricao</td>
                                        <td>@doc.DataCriacao.ToString("dd/MM/yyyy")</td>
                                        <td>@doc.NivelSeguranca</td>
                                        <td class="action-cell">
                                            <!-- Botões de ação -->
                                            <a href="#" class="action-btn" title="Download" data-bs-toggle="modal" 
                                               data-bs-target="#download@(doc.NivelSeguranca == VoxDocs.DTO.NivelSeguranca.Publico ? "Public" : "Token")Modal-@doc.Id">
                                                <span class="material-symbols-outlined">download</span>
                                            </a>
                                            
                                            <a href="#" class="action-btn" title="Editar" data-bs-toggle="modal" 
                                               data-bs-target="#edit@(doc.NivelSeguranca == VoxDocs.DTO.NivelSeguranca.Publico ? "Public" : "Token")Modal-@doc.Id">
                                                <span class="material-symbols-outlined">edit</span>
                                            </a>
                                            
                                            <a href="#" class="action-btn" title="Excluir" data-bs-toggle="modal" 
                                               data-bs-target="#deleteModal-@doc.Id">
                                                <span class="material-symbols-outlined">delete</span>
                                            </a>
                                            
                                            <!-- Renderizar os modais -->
                                            @await Html.PartialAsync("_DeleteModal", new VoxDocs.Models.ViewModels.DocumentoEditViewModel {
                                                Id = doc.Id,
                                                NomeArquivoAtual = doc.NomeArquivo,
                                                NivelSeguranca = doc.NivelSeguranca
                                            })
                                            
                                            @await Html.PartialAsync("_DownloadModal", new VoxDocs.Models.ViewModels.DocumentoEditViewModel {
                                                Id = doc.Id,
                                                NomeArquivoAtual = doc.NomeArquivo,
                                                NivelSeguranca = doc.NivelSeguranca
                                            })
                                            
                                            @await Html.PartialAsync("_EditModal", new VoxDocs.Models.ViewModels.DocumentoEditViewModel {
                                                Id = doc.Id,
                                                NomeArquivoAtual = doc.NomeArquivo,
                                                NivelSeguranca = doc.NivelSeguranca,
                                                Descricao = doc.Descricao
                                            })
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                <div class="mt-3 d-flex justify-content-between">
                    <a class="btn btn-secondary"
                       href="@Url.Action("Documentos","DocumentosMvc", new { pastaPrincipalNome = Model.SelectedPastaPrincipalNome })">
                        <span class="material-symbols-outlined">arrow_back</span>
                        Voltar para Subpastas
                    </a>
                    <a class="btn btn-secondary"
                       href="@Url.Action("Documentos","DocumentosMvc")">
                        <span class="material-symbols-outlined">home</span>
                        Voltar ao início
                    </a>
                </div>
            </div>
        }
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Funções da versão antiga para manipulação de documentos
        function excluirDocumento(id, nivelSeguranca) {
            const messageDiv = $(`#deleteMessage-${id}`);
            messageDiv.hide().empty();

            let token = '';
            if (nivelSeguranca !== 'Publico') {
                token = $(`#token-${id}`).val();
                
                if (!token) {
                    mostrarMensagem(id, 'danger', 'Informe o token de segurança!');
                    return;
                }
            }

            const antiForgery = $('input[name="__RequestVerificationToken"]').first().val();

            const url = '@Url.Action("Delete", "DocumentosMvc")';

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': antiForgery
                },
                body: `id=${id}&token=${encodeURIComponent(token)}`
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(errorData => {
                        throw new Error(errorData.message || 'Erro na exclusão');
                    });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    mostrarMensagem(id, 'success', data.message);
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    mostrarMensagem(id, 'danger', data.message);
                }
            })
            .catch(error => {
                let errorMsg = error.message;
                if (error.message.includes('obrigatório')) {
                    errorMsg = "Token de segurança obrigatório!";
                }
                mostrarMensagem(id, 'danger', errorMsg);
            });
        }

        function baixarDocumentoPublico(nomeArquivo, id) {
            const errorDiv = $(`#downloadPublicError-${id}`);
            errorDiv.hide().empty();

            const url = `@Url.Action("DownloadPorNome", "DocumentosMvc")?nomeArquivo=${encodeURIComponent(nomeArquivo)}`;

            fetch(url, { method: 'GET' })
                .then(response => {
                    if (!response.ok) throw new Error(`HTTP ${response.status}`);
                    return response.blob();
                })
                .then(blob => {
                    const blobUrl = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = blobUrl;
                    a.download = nomeArquivo;
                    a.style.display = 'none';
                    document.body.appendChild(a);
                    a.click();
                    
                    URL.revokeObjectURL(blobUrl);
                    document.body.removeChild(a);
                    
                    $(`#downloadPublicModal-${id}`).modal('hide');
                })
                .catch(error => {
                    let errorMsg = 'Erro ao baixar o documento. Tente novamente.';
                    
                    if (error.message.includes('401')) errorMsg = 'Acesso não autorizado!';
                    if (error.message.includes('404')) errorMsg = 'Documento não encontrado!';
                    if (error.message.includes('500')) errorMsg = 'Erro interno no servidor!';
                    
                    errorDiv.html(`<div class="alert alert-danger mt-2">${errorMsg}</div>`).show();
                    console.error('Erro no download:', error);
                });
        }

        function loadDocumentos() {
            console.log('[loadDocumentos] Recarregando documentos');
            const pasta = '@ViewBag.SelectedPastaPrincipalNome';
            const subPasta = '@ViewBag.SelectedSubPastaNome';
            
            $.get('@Url.Action("Documentos")', { 
                pastaPrincipalNome: pasta, 
                subPastaNome: subPasta 
            }, function(data) {
                console.log('[loadDocumentos] Dados recebidos, atualizando DOM');
                $('#documentos-container').html($(data).find('#documentos-container').html());
            })
            .fail(function(xhr) {
                console.error('[loadDocumentos] ERRO ao carregar documentos:', xhr.statusText);
            });
        }

        // Editar documento - AJAX com FormData
        function editarDocumento(formId) {
            console.log(`[editarDocumento] Iniciando envio do formulário: ${formId}`);
            const form = document.getElementById(formId);
            
            if (!form) {
                console.error(`[editarDocumento] Formulário não encontrado: ${formId}`);
                alert('Erro: formulário não encontrado');
                return;
            }
            
            const formData = new FormData(form);
            const antiForgery = $('input[name="__RequestVerificationToken"]').first().val();
            const documentoId = formData.get('Id');
            
            // Obter token do localStorage (armazenado durante validação)
            const tokenKey = `token_${documentoId}`;
            const tokenSeguranca = localStorage.getItem(tokenKey);
            
            // Adicionar token separadamente ao FormData APENAS se existir
            if (tokenSeguranca) {
                formData.append('tokenSeguranca', tokenSeguranca);
                console.log(`[editarDocumento] Token adicionado: ${tokenSeguranca}`);
            } else {
                console.log(`[editarDocumento] Nenhum token encontrado para ID: ${documentoId}`);
            }

            $.ajax({
                url: '@Url.Action("Edit", "DocumentosMvc")',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                headers: { 'RequestVerificationToken': antiForgery },
                success: function(resp) {
                    console.log(`[editarDocumento] Resposta recebida:`, resp);
                    
                    if (resp.success) {
                        alert(resp.message);
                        $('.modal').modal('hide');
                        loadDocumentos();
                    } else {
                        console.error(`[editarDocumento] Erro na resposta: ${resp.message}`);
                        alert('Erro: ' + resp.message);
                    }
                    
                    // Limpar token do localStorage após uso
                    if (tokenSeguranca) {
                        localStorage.removeItem(tokenKey);
                    }
                },
                error: function(xhr, status, error) {
                    console.error(`[editarDocumento] ERRO AJAX:`, status, error, xhr.responseText);
                    alert('Erro na requisição: ' + error);
                    
                    // Limpar token em caso de erro
                    if (tokenSeguranca) {
                        localStorage.removeItem(tokenKey);
                    }
                }
            });
        }

        function validarTokenParaEdicao(id, nomeArquivo) {
            console.log(`[validarTokenParaEdicao] Validando token para documento ID: ${id}, Nome: ${nomeArquivo}`);
            
            const tokenInput = document.getElementById(`tokenInput-${id}`);
            const tokenError = document.getElementById(`tokenError-${id}`);
            const token = tokenInput.value.trim();
            
            tokenError.style.display = 'none';
            
            if (!token) {
                tokenError.textContent = 'Token é obrigatório!';
                tokenError.style.display = 'block';
                return;
            }
            
            fetch(`@Url.Action("ValidateToken", "DocumentosMvc")?nomeArquivo=${encodeURIComponent(nomeArquivo)}&token=${encodeURIComponent(token)}`)
                .then(response => {
                    if (response.ok) return response.json();
                    throw new Error('Erro na validação do token');
                })
                .then(data => {
                    if (data.sucesso) {
                        console.log(`[validarTokenParaEdicao] Token válido para documento ID: ${id}`);
                        
                        // Armazenar token no localStorage (chave única por documento)
                        const tokenKey = `token_${id}`;
                        localStorage.setItem(tokenKey, token);
                        console.log(`[validarTokenParaEdicao] Token armazenado: ${tokenKey}`);
                        
                        $(`#editTokenModal-${id}`).modal('hide');
                        $(`#editFormModal-${id}`).modal('show');
                    } else {
                        tokenError.textContent = 'Token inválido!';
                        tokenError.style.display = 'block';
                        console.log(`[validarTokenParaEdicao] Token inválido para documento ID: ${id}`);
                    }
                })
                .catch(error => {
                    tokenError.textContent = 'Erro ao validar token: ' + error.message;
                    tokenError.style.display = 'block';
                    console.error(`[validarTokenParaEdicao] Erro: ${error.message}`, error);
                });
        }

        function mostrarMensagem(id, tipo, msg) {
            const d = $('#deleteMessage-' + id);
            d.removeClass('alert-success alert-danger').addClass('alert-' + tipo).html(msg).show();
        }
    </script>
</body>
</html>